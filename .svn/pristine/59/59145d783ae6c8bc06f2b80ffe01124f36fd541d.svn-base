//
//  TimeLineUserViewController.swift
//  KAPChat
//
//  Created by Kien Nguyen Dang on 12/13/16.
//  Copyright © 2016 Kien Nguyen Dang. All rights reserved.
//

import UIKit
import Firebase

class TimeLineUserViewController: BaseAuthenticatedViewController ,UIImagePickerControllerDelegate,UINavigationControllerDelegate{
    
    @IBOutlet weak var btnAddFriend: UIButton!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var imgAvt: UIImageView!
    
    var listPosts = [Post]()
    
    var userCurrent:User!
    
    var cache = NSCache<AnyObject,AnyObject>()
    
    var storage: FIRStorage!
    
    let newSize = CGSize(width: 100 , height: 200)
    let avtSize = CGSize(width: 40, height: 40)
    
    var uid: String!
    var imagePicker = UIImagePickerController()
    
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        //listenEventAcceptRequestFromFriend(uid)
        
        tableView.dataSource = self
        tableView.delegate = self
        tableView.register(UINib(nibName: "PostCell", bundle: nil), forCellReuseIdentifier: "photoCell")
        //tableView.register(UINib(nibName: "TextCell", bundle: nil), forCellReuseIdentifier: "textCell")
        
        tableView.rowHeight = UITableViewAutomaticDimension
        tableView.estimatedRowHeight = 500
        
        checkFriend(uid: uid)
        imgAvt.layer.cornerRadius = 0.5*imgAvt.layer.bounds.size.width
        imgAvt.layer.masksToBounds = true
        if uid == currentuserID{
            let tapGesture = UITapGestureRecognizer(target: self, action: #selector(TimeLineUserViewController.showDialog))
            imgAvt.addGestureRecognizer(tapGesture)
            imgAvt.isUserInteractionEnabled = true
        }
    }
    
    //show dialog for user change avatar
    func showDialog() {
        let alert = UIAlertController(title: "Ảnh đại diện", message: nil, preferredStyle: .actionSheet)
        //hiển thị tuỳ chọn cho người dùng nếu chưa đăng nhập hoặc chưa đăng ký
        alert.addAction(UIAlertAction(title: "Chọn ảnh từ gallary", style: .default, handler: { (action) in
            self.imagePicker.delegate = self
            self.imagePicker.allowsEditing = true
            self.imagePicker.sourceType = .photoLibrary
            
            self.present(self.imagePicker, animated: true, completion: nil)
            
        }))
        
//        alert.addAction(UIAlertAction(title: "Đăng Ký", style: .default, handler: { (action) in
//            let vc = RegisterViewController()
//            self.present(vc, animated: true, completion: nil)
//            
//        }))
        
        alert.addAction(UIAlertAction(title: "Huỷ", style: .default, handler: { (action) in
            //
        }))
        alert.popoverPresentationController?.barButtonItem = self.navigationItem.rightBarButtonItem
        alert.popoverPresentationController?.sourceView = self.view
        alert.popoverPresentationController?.sourceRect = self.view.bounds
        self.present(alert, animated: true, completion: nil)
    }
    
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        if let pickedImage = info[UIImagePickerControllerOriginalImage] as? UIImage {
            imgAvt.contentMode = .scaleAspectFit
            imgAvt.image = pickedImage
            if let imgData = UIImageJPEGRepresentation(pickedImage, 0.1){
                let imgPath = NSUUID().uuidString
                    uploadImageToFirebase(data: imgData as NSData, withPath: imgPath, completed: {(url) in
                    self.fireBaseRef.child("Users").child(self.currentuserID).child("avatarUrl").setValue(url)
                    self.loadAvatar()
                    self.tableView.reloadData()
                })
            }
            
        }
        
        dismiss(animated: true, completion: nil)
    }
    
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
        dismiss(animated: true, completion: nil)
    }
    
    func uploadImageToFirebase(data:NSData, withPath: String, completed: @escaping(String) -> Void)
    {
        let storageRef = FIRStorage.storage().reference(withPath: "Image/" + "\(withPath)")
        let uploadMetadata = FIRStorageMetadata()
        uploadMetadata.contentType = "image/jpeg"
        storageRef.put(data as Data, metadata: uploadMetadata) { (metadata,error) in
            if ( error != nil)
            {
                print("Error: Unable to upload image to Firebase storage")
            }else{
                print("Message: Successfully uploaded image to Firebase storage")
                print("Here's your download URL: \(metadata?.downloadURL())")
                let downloadURL = metadata?.downloadURL()?.absoluteString
                if let url = downloadURL {
                    completed(url)
                }
                
            }
        }
    }
    
    //send request to an user
    @IBAction func btnAddFriend(_ sender: Any) {
        sendRequestToUser(uid)
    }
    
    func sendRequestToUser(_ userID: String) {
        //        USER_REF.child(userID).child("requests").child(CURRENT_USER_ID).setValue(true)
        self.fireBaseRef.child("Users").child(userID).child("RequestFriend").child(self.currentuserID).setValue(true)
        listenEventAcceptRequestFromFriend(userID)
    }
    
    func listenEventAcceptRequestFromFriend(_ userID: String) {
        self.fireBaseRef.child("Users").child(userID).child("RequestFriend").child(self.currentuserID).observe(.childChanged, with: { (snap: FIRDataSnapshot) in
            let statusRequest = snap.value as! Bool
            if statusRequest == true{
                
            }else{
                //push notification accept in here
                self.fireBaseRef.child("Users").child(userID).child("RequestFriend").child(self.currentuserID).removeValue()
                self.fireBaseRef.child("Users").child(userID).child("RequestFriend").child(self.currentuserID).removeAllObservers()
                
            }
        })
    }
    
    
    
    @IBAction func btnLoimoiketban(_ sender: Any) {
        let vc = RequestOfFriendViewController()
        self.navigationController?.pushViewController(vc, animated: true)
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    //check is friend or not
    //if not will be show button add friend and hide table view
    //else will be show table view and hide button add friend
    func checkFriend(uid: String){
        self.fireBaseRef.child("Users").child(currentuserID).child("listFriend").observeSingleEvent(of: .value, with: {(snapshot: FIRDataSnapshot) in
            if let listFriend: [FIRDataSnapshot] = snapshot.children.allObjects as? [FIRDataSnapshot]{
                for friend in listFriend{
                    if uid == friend.key || uid == self.currentuserID{
                        self.btnAddFriend.isEnabled = false
                        self.btnAddFriend.isHidden = true
                        self.tableView.isHidden = false
                        //let list post of user
                        self.getListPostFromCurrentUser()
                        //get user info
                        self.getCurrentUserInfo()
                        self.tableView.reloadData()
                        return
                    }else{
                        self.btnAddFriend.isEnabled = true
                        self.btnAddFriend.isHidden = false
                        self.tableView.isHidden = true
                    }
                    
                }
                
            }
        })
        
    }
    
    //load avatar
    func loadAvatar() {
        //set size for img
        imgAvt.image = UIImage.imageWithColor(UIColor.lightGray, size: avtSize).createRadius(newSize: avtSize, radius: 22, byRoundingCorners: .allCorners)
        //get image from ram if cached
        if let avtDownloaded = cache.object(forKey: self.userCurrent.avatarUrl as AnyObject) as? UIImage {
            imgAvt.image = avtDownloaded
        } else {
            //if img not existed in ram. we will be download from firebase
            imgAvt.image = UIImage.imageWithColor(UIColor.lightGray, size: avtSize).createRadius(newSize: avtSize, radius: 22, byRoundingCorners: .allCorners)
            DispatchQueue.global().async {
                if let url = URL(string: self.userCurrent.avatarUrl) {
                    if let data = try? Data(contentsOf: url) {
                        DispatchQueue.main.async {
                            if let img = UIImage(data: data) {
                                
                                let resultImg = img.scaleImage(newSize: self.avtSize).createRadius(newSize: self.avtSize, radius: 22, byRoundingCorners: .allCorners)
                                //Cache image to ram
                                self.cache.setObject(resultImg, forKey: self.userCurrent.avatarUrl as AnyObject)
                                self.imgAvt.image = resultImg
                            }
                        }
                    }
                }
            }
        }
        
    }

    func getCurrentUserInfo(){
        //let currentUserId = self.currentuserID
        self.fireBaseRef.child("Users").child(uid).observeSingleEvent(of: .value, with: {(snap) in
            
            guard let userDict = snap.value as? [String:AnyObject] else { return }
            
            if let user = User(uid: snap.key, JsonData: userDict) {
                self.userCurrent = user
                self.loadAvatar()
            }
            self.tableView.reloadData()
        })
    }
    
    func getListPostFromCurrentUser(){
        
        self.fireBaseRef.child("Post").child(uid).observeSingleEvent(of: .value, with: { (snapshot) in
            for item in snapshot.children.allObjects as! [FIRDataSnapshot]{
                if let postDictionary = item.value as? [String:AnyObject]{
                    let post = Post(postID: item.key, postData: postDictionary)
                    self.listPosts.append(post!)
                    self.sortPosts()
                }
            }
        })
    }
    
    
    func sortPosts() {
        self.listPosts.sort{$0.time.compare($1.time as Date) == .orderedDescending}
        self.tableView.reloadData()
    }
 
}


extension TimeLineUserViewController:UITableViewDelegate,UITableViewDataSource{
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return listPosts.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        // Lấy bài post ở vị trí row index
        let post = listPosts[indexPath.row]
        
        let formatter = DateFormatter()
        formatter.dateFormat = "HH: mm - dd/MM/yyyy"
        
        let newSize = CGSize(width: 100 , height: 200)
        let avtSize = CGSize(width: 40, height: 40)
        
        // Nếu bài post có chứa hình
        let cell = tableView.dequeueReusableCell(withIdentifier: "photoCell") as? PostCell
        guard self.userCurrent != nil else {
            return cell!
        }
        if post.type == .Photo {
            cell?.delegatePhotoPostCell = self
            //let cell = Bundle.main.loadNibNamed("PostCell", owner: self, options: nil)?.first as? PostCell
            cell?.usernameLbl.text = userCurrent?.displayName
            let tapGesture = UITapGestureRecognizer(target: self, action: #selector(FeedViewController.moveToTimeLineScreen))
            cell?.usernameLbl.addGestureRecognizer(tapGesture)
            cell?.caption.text = post.caption
            cell?.likeLbl.text = String(post.likes)
            if post == listPosts.first{
                cell?.timeLbl.text = "🔴 " + formatter.string(from: post.time as Date)
            }else{
                cell?.timeLbl.text = "📅 " + formatter.string(from: post.time as Date)
            }
            if let imageDownloaded = cache.object(forKey: post.imageUrl as AnyObject) as? UIImage {
                cell?.postImg.image = imageDownloaded
            } else {
                let ref = FIRStorage.storage().reference(forURL: post.imageUrl!)
                ref.data(withMaxSize: 2 * 1024 * 1024, completion: { (data, error) in
                    if error != nil {
                        print("JESS: Unable to download image from Firebase storage")
                    } else {
                        print("JESS: Image downloaded from Firebase storage")
                        if let imgData = data {
                            if let img = UIImage(data: imgData) {
                                let resultImg = img.scaleImage(newSize: newSize)
                                self.cache.setObject(resultImg, forKey: post.imageUrl as AnyObject)
                                cell?.postImg.image = resultImg
                            }
                        }
                    }
                })
            }

            if let avtDownloaded = cache.object(forKey: self.userCurrent.avatarUrl as AnyObject) as? UIImage {
                cell?.profileImg.image = avtDownloaded
            } else {
                //Chứa cache thì lấy hình online và resize , Radius hình
                cell?.profileImg.image = UIImage.imageWithColor(UIColor.lightGray, size: avtSize).createRadius(newSize: avtSize, radius: 22, byRoundingCorners: .allCorners)
                DispatchQueue.global().async {
                    if let url = URL(string: self.userCurrent.avatarUrl) {
                        if let data = try? Data(contentsOf: url) {
                            DispatchQueue.main.async {
                                if let img = UIImage(data: data) {
                                    
                                    let resultImg = img.scaleImage(newSize: avtSize).createRadius(newSize: avtSize, radius: 22, byRoundingCorners: .allCorners)
                                    //Cache hình vào ram
                                    self.cache.setObject(resultImg, forKey: self.userCurrent.avatarUrl as AnyObject)
                                    cell?.profileImg.image = resultImg
                                }
                            }
                        }
                    }
                }
            }
            
            let likesRef = fireBaseRef.child("Users").child(currentuserID).child("listLike").child(post.postId!)
            likesRef.observeSingleEvent(of: .value, with: { (snapshot) in
                if let _ = snapshot.value as? NSNull {
                    cell?.likeImg.image = UIImage(named: "empty-heart")
                } else {
                    cell?.likeImg.image = UIImage(named: "filled-heart")
                }
            })
            
            
        }
        return cell!
    }
}
//cell.customCell(post: post)
extension TimeLineUserViewController:PhotoPostCellDelegate{
    func tapOnPhoto(cell: PostCell, tap: UITapGestureRecognizer) {
        let imageView = cell.postImg as UIImageView
        
        self.navigationController?.isNavigationBarHidden = true
        let newImageView = UIImageView(image: imageView.image)
        
        newImageView.frame = self.view.frame
        
        newImageView.backgroundColor = .black
        
        newImageView.contentMode = .scaleToFill
        
        newImageView.isUserInteractionEnabled = true
        
        
        
        let tap = UITapGestureRecognizer(target: self, action: #selector(self.dismissFullscreenImage(sender:)))
        
        newImageView.addGestureRecognizer(tap)
        
        self.view.addSubview(newImageView)
    }
    func dismissFullscreenImage(sender: UITapGestureRecognizer) {
        
        sender.view?.removeFromSuperview()
        
        self.navigationController?.isNavigationBarHidden = false
        
    }
    func tapOnLikeImage(cell: PostCell, tap: UITapGestureRecognizer) {
        let likesRef = fireBaseRef.child("Users").child(currentuserID).child("listLike")
        likesRef.observeSingleEvent(of: .value, with: { (snapshot) in
            if let _ = snapshot.value as? NSNull {
                cell.likeImg.image = UIImage(named: "filled-heart")
                //self.post.adjustLikes(addLike: true)
                cell.likesRef.setValue(true)
            } else {
                cell.likeImg.image = UIImage(named: "empty-heart")
                //self.post.adjustLikes(addLike: false)
                cell.likesRef.removeValue()
            }
        })
    }
    func tapOnLinkUrl(cell: PostCell, tap: UITapGestureRecognizer) {
        
        if (cell.caption.text.isValidForUrl()){
            cell.textLabel?.textColor = UIColor.blue
            let url = cell.caption.text
            UIApplication.shared.openURL(URL(string: url!)!)
        }
        
    }
}


